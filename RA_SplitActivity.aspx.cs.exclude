using System;
using System.Collections.Generic;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using AppCode;
using System.Text;
using System.Collections;


public partial class RA_SplitActivity : System.Web.UI.Page
{
    dbFunction objDB = new dbFunction();
    protected void Page_Load(object sender, EventArgs e)
    {
        if (Session["USERID"] == null)
        {
            Response.Redirect("Login.aspx");
        }
        // Session["USERID"] = "B415";
        if (ViewState["TXTCOUNT"] == null)
        {
            ViewState["TXTCOUNT"] = 0;
        }
        if (!IsPostBack)
        {
            if (Session["USERID"] != null && Session["ROLE"] != null && "VEND".Equals(Session["ROLE"].ToString()))
            {               
                    bindJobNumber(Session["USERID"].ToString());                
            }
            else
            {
                Common.Show("This option is valid for Contractor only");
                Response.Redirect("Default.aspx");
            }           
        }
    }

    protected void bindJobNumber(string userId)
    {
        StringBuilder sbQuery = new StringBuilder();
        //sbQuery.Append("SELECT DISTINCT JOB_NO FROM RAB_TENDER_MASTER ");
        Dictionary<string, string> paramList = new Dictionary<string, string>();
        sbQuery.Append("SELECT DISTINCT JOB_NO FROM RAB_TENDER_MASTER where C_CODE=:C_CODE order by JOB_NO");
        paramList.Add("C_CODE", userId);
        objDB.bindDropDownList(ddJobNumber, sbQuery.ToString(), paramList, "JOB_NO", "JOB_NO", "", "--Select Job Number--");
    }

    protected void bindTenders(string jobNumber)
    {
        StringBuilder sbQuery = new StringBuilder();
       /* sbQuery.Append("SELECT DISTINCT TENDER_NO FROM RAB_TENDER_MASTER ")
            .Append(" WHERE JOB_NO=:JOB_NO ")
            .Append(" ORDER BY TENDER_NO ");
        */
        sbQuery.Append(" Select DISTINCT TENDER_NO , tenderno||' ( '||b.title||' '||b.title1||')' description ")
             .Append(" FROM RAB_TENDER_MASTER a,ppms.tenderschedule b")
              .Append(" WHERE JOB_NO=:JOB_NO ")
              .Append(" and C_CODE=:C_CODE ")
              .Append(" and upper(trim(b.projno))=upper(trim(A.JOB_NO))")
              .Append(" and A.TENDER_NO=b.tendersrno")
              .Append(" ORDER BY TENDER_NO ");

        Dictionary<string, string> paramList = new Dictionary<string, string>();
        paramList.Add("JOB_NO", jobNumber.ToUpper());
        paramList.Add("C_CODE", Session["USERID"].ToString());
        objDB.bindDropDownList(ddTenderNo, sbQuery.ToString(), paramList, "TENDER_NO", "description", "", "--Select Job Number--");
    }

    protected void ddJobNumber_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (!"".Equals(ddJobNumber.SelectedValue))
        {
            bindTenders(ddJobNumber.SelectedValue);
            pnlSORItems.Visible = false;
            gvSOR.Visible = false;
        }
        else
        {
            Common.Show("Please select Job Number");
        }
    }

    protected void ddTenderNo_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (!"".Equals(ddJobNumber.SelectedValue) && !"".Equals(ddTenderNo.SelectedValue))
        {
            bindSor(ddJobNumber.SelectedValue,ddTenderNo.SelectedValue);
            pnlSORItems.Visible = false;
            gvSOR.Visible = true;
        }
        else
        {
            Common.Show("Please select Job Number and Tender Number");
        }
    }    

    protected void bindSor(string jobNumber, string tenderNo)
    {
        StringBuilder sbQuery = new StringBuilder();
        sbQuery.Append("SELECT distinct REF_ID, JOB_NO, SUB_JOB, TENDER_NO, PART_NO, SOR_NO, C_CODE, LOI_NO, to_char(LOI_DATE,'dd-Mon-yyyy') LOI_DATE, UNIT_NO,TEND_SOR_ID ")
            .Append(" FROM RAB_TENDER_MASTER ")
            .Append(" where upper(JOB_NO)=:JOB_NO ")
            .Append(" AND upper(TENDER_NO)=:TENDER_NO ")
             .Append(" AND C_CODE=:C_CODE ")
            .Append(" order by SUB_JOB, TENDER_NO, PART_NO, SOR_NO ");
        Dictionary<string, string> paramList = new Dictionary<string, string>();
        paramList.Add("JOB_NO", jobNumber.ToUpper());
        paramList.Add("TENDER_NO", tenderNo.ToUpper());
        paramList.Add("C_CODE", Session["USERID"].ToString());
        objDB.bindGridView(gvSOR, sbQuery.ToString(), paramList);
    }
    protected void gvSOR_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        //try
        //{
        //    if (e.CommandName.Equals("Select"))
        //    {
        //        int RowIndex = Convert.ToInt16(e.CommandArgument.ToString());
        //      //  bindSORDetails();
        //        gvSOR.SelectedIndex = RowIndex;
        //        gvSOR.SelectedRow.BackColor = System.Drawing.Color.LightYellow;
        //    }
        //}
        //catch (Exception ex)
        //{

        //}
    }
    protected void gvSOR_SelectedIndexChanged(object sender, EventArgs e)
    {
        GridViewRow row = gvSOR.SelectedRow;
        HiddenField hdReferenceID = new HiddenField();
        hdReferenceID = (HiddenField)row.FindControl("hdReferenceID");
        string referenceId = hdReferenceID.Value;
        bindSORItems(referenceId,ddJobNumber.SelectedValue);
        
        pnlSORItems.Visible = true;
    }   

    protected void gvSOR_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            //// loop all data rows
            //foreach (DataControlFieldCell cell in e.Row.Cells)
            //{
            //    // check all cells in one row
            //    foreach (Control control in cell.Controls)
            //    {
            //        // Must use LinkButton here instead of ImageButton
            //        // if you are having Links (not images) as the command button.
            //        //ImageButton button = control as ImageButton;
            //        LinkButton button = control as LinkButton;
            //        if (button != null && button.CommandName == "Delete")
            //            // Add delete confirmation
            //            button.OnClientClick = "if (!confirm('Are you sure " +
            //                   "you want to delete this category?')) return;";
            //    }
            //}
        }
    }

    protected void bindSORItems(string referenceId,string jobNumber)
    {    
    StringBuilder sbQuery = new StringBuilder();  

 /*   sbQuery.Append(" SELECT distinct REF_ID, SEQ_NO, a.ITEM_RATE, a.UOM, a.SORT_NO, ACT_DESC, ACT_PERCENT, ACT_SEQ, ADDED_ON, HO_QTY, SITE_QTY, ACT_PROG, FLAG_HO, a.sorno ")
.Append(" sdesc,to_char(ldesc) ldesc  ")
       .Append("   FROM RAB_ITEM_BREAKUP a,icms_cba.cba_tender  b ")
       .Append("   where upper(REF_ID)=:REF_ID ")
       .Append("   and A.SEQ_NO=B.SEQNO ")
        .Append("  and b.JOB=:JOBNO ")
        .Append("  and b.jtn=:TENDER_NO ")
        .Append("  order by SORT_NO ");
     */

 /*   sbQuery.Append(" SELECT  REF_ID, ")
           .Append("  SEQ_NO, ")
            .Append(" ITEM_RATE, ")
            .Append(" UOM, ")
            .Append(" SORT_NO, ")
            .Append(" ACT_DESC, ")
            .Append(" ACT_PERCENT, ")
            .Append(" ACT_SEQ, ")
           .Append("  ADDED_ON, ")
            .Append(" HO_QTY,   ")
            .Append("    SITE_QTY, ")
           .Append("  ACT_PROG, ")
          .Append("   FLAG_HO, ")
           .Append("   sdesc, ")
           .Append(" case when ldesc is null   then ra_get_seq_desc (SEQ_NO, sdesc)  else  ldesc  end  ldesc ")
           .Append("   FROM ")
           .Append(" (( ")
            .Append(" SELECT DISTINCT REF_ID, ")
           .Append("    SEQ_NO, ")
           .Append("     a.ITEM_RATE, ")
          .Append("      a.UOM, ")
          .Append("   a.SORT_NO, ")
          .Append("    ACT_DESC, ")
          .Append("   ACT_PERCENT, ")
          .Append("    ACT_SEQ, ")
          .Append("   ADDED_ON, ")
         .Append("    HO_QTY, ")
         .Append("    SITE_QTY, ")
          .Append("   ACT_PROG, ")
         .Append("    FLAG_HO, ")
         .Append("    a.sorno sdesc, ")
           .Append("  ( TO_char (substr(a.ldesc,0,4000))) ldesc ")
.Append("  FROM RAB_ITEM_BREAKUP a, icms_cba.cba_tender b ")
.Append("  WHERE     UPPER (REF_ID) =:REF_ID          ")
 .Append("   AND b.JOB =:JOBNO ")
.Append("    AND b.jtn =:TENDER_NO ")
.Append("     AND A.SEQ_NO = B.SEQNO ")
.Append("     AND FLAG_HO ='N'  ")
.Append("    ) ")
.Append("     UNION ")
.Append("     ( ")
.Append("     SELECT  REF_ID, ")
.Append("               SEQ_NO, ")
.Append("             ITEM_RATE, ")
.Append("             UOM, ")
 .Append("            SORT_NO, ")
    .Append("         ACT_DESC, ")
     .Append("        ACT_PERCENT, ")
      .Append("       ACT_SEQ, ")
       .Append("      ADDED_ON, ")

      // .Append("      SITE_QTY HO_QTY, ")
      .Append("       HO_QTY,SITE_QTY, ")

       .Append("      ACT_PROG, ")
       .Append("      FLAG_HO, ")
        .Append("     sorno sdesc, ")
        .Append("      ACT_DESC ldesc ")
        .Append("      FROM ")
        .Append("      RAB_ITEM_BREAKUP  ")
           .Append("   WHERE UPPER (REF_ID) =:REF_ID1  ")
          .Append("    AND FLAG_HO ='Y' ")

 .Append(" )  ")

.Append("  ORDER BY SORT_NO) ");
*/

    sbQuery.Append(@"SELECT distinct REF_ID,
       SEQ_NO,
       ITEM_RATE,
       UOM,
       SORT_NO,
       ACT_DESC,
       ACT_PERCENT,
       ACT_SEQ,
       ADDED_ON,
       HO_QTY,
       SITE_QTY,
       ACT_PROG,
       FLAG_HO,
       sdesc,
       CASE
          WHEN ldesc IS NULL THEN ra_get_seq_desc (SEQ_NO, sdesc)
          ELSE ldesc
       END
          ldesc
  FROM ( (SELECT DISTINCT REF_ID,
                          SEQ_NO,
                          nvl(a.ITEM_RATE_EDITED,a.ITEM_RATE) ITEM_RATE,
                          a.UOM,
                          a.SORT_NO,
                          ACT_DESC,
                          ACT_PERCENT,
                          ACT_SEQ,
                          ADDED_ON,
                          HO_QTY,
                          SITE_QTY,
                          ACT_PROG,
                          FLAG_HO,
                          a.sorno sdesc,
                          (TO_CHAR (SUBSTR (a.ldesc, 0, 4000))) ldesc
            FROM RAB_ITEM_BREAKUP a, icms_cba.cba_tender b
           WHERE     UPPER (REF_ID) =:REF_ID
                 AND b.JOB =:JOBNO
                 AND b.jtn =:TENDER_NO
                 AND A.SEQ_NO = B.SEQNO
                 AND FLAG_HO = 'N')
        UNION
        (SELECT DISTINCT REF_ID,
                          SEQ_NO,
                         nvl(a.ITEM_RATE_EDITED,a.ITEM_RATE) ITEM_RATE,
                          a.UOM,
                          a.SORT_NO,
                          ACT_DESC,
                          ACT_PERCENT,
                          ACT_SEQ,
                          ADDED_ON,
                          HO_QTY,
                          SITE_QTY,
                          ACT_PROG,
                          FLAG_HO,
                          a.sorno sdesc,
                          (TO_CHAR (SUBSTR (a.ldesc, 0, 4000))) ldesc
            FROM RAB_ITEM_BREAKUP a,CPMSTENDERS.VW_C_FOA_ITEMS_SITEMS b
           WHERE      UPPER (REF_ID) =:REF_ID
                 AND b.JOB_code =:JOBNO
                 AND b.SOR_NO = A.SORNO
                 AND A.SEQ_NO = B.item_sl_no
                 AND FLAG_HO = 'N')
                 union
        (SELECT REF_ID,
                SEQ_NO,
                nvl(ITEM_RATE_EDITED,ITEM_RATE) ITEM_RATE,
                UOM,
                SORT_NO,
                ACT_DESC,
                ACT_PERCENT,
                ACT_SEQ,
                ADDED_ON,
                HO_QTY,
                SITE_QTY,
                ACT_PROG,
                FLAG_HO,
                sorno sdesc,
                ACT_DESC ldesc
           FROM RAB_ITEM_BREAKUP
          WHERE UPPER (REF_ID) =:REF_ID AND FLAG_HO = 'Y')
        ORDER BY SORT_NO)  order by SORT_NO");

        Dictionary<string, string> paramList = new Dictionary<string, string>();
        paramList.Add("REF_ID", referenceId.ToUpper());
        paramList.Add("JOBNO", jobNumber);
        paramList.Add("TENDER_NO", ddTenderNo.SelectedValue);
       // paramList.Add("REF_ID1", referenceId.ToUpper());
        objDB.bindGridView(gvSORItems, sbQuery.ToString(), paramList);
    }

    protected void gvSORItems_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            HiddenField hdReferenceID = new HiddenField();
            hdReferenceID = (HiddenField)e.Row.FindControl("hdReferenceID");
            string referenceId = hdReferenceID.Value;
            HiddenField hdSequenceNo = new HiddenField();
            hdSequenceNo = (HiddenField)e.Row.FindControl("hdSequenceNo");
            string sequenceNo = hdSequenceNo.Value;

            HiddenField hdItemRate = new HiddenField();
            hdItemRate = (HiddenField)e.Row.FindControl("hdItemRate");
            string itemRate = hdItemRate.Value;
            
            Button btnSplitActivity = new Button();
            btnSplitActivity = (Button)e.Row.FindControl("btnSplitActivity");
            
            GridView gvChildReport = e.Row.FindControl("gvSORSplits") as GridView;
            StringBuilder query = new StringBuilder();
            query.Append(" select distinct REF_ID,SEQ_NO,ACTIVITY_DESC , ")
                .Append(" ACTIVITY_PERCENT,IS_BREAKABLE,ACTIVITY_ID,BE_FROZEN,AC_FROZEN,RCM_FROZEN,activity_seq   ")               
                .Append("    from RAB_TENDER_DETAILS ")
                .Append(" where REF_ID=:REF_ID ")
                .Append(" and SEQ_NO =:SEQ_NO ")
                //Adding because duplicate data has been inserted
                //Commented below line on 06-07-2017 as it was giving problem when two activities were splitted by same no for e.g. 5% each (It was missing one 5% from the list)
                //.Append(" and ACTIVITY_ID in (select min(ACTIVITY_ID) from RAB_TENDER_DETAILS WHERE REF_ID =:REF_ID1 AND SEQ_NO =:SEQ_NO1 and is_breakable='Y' group by activity_percent)")

                .Append(" order by activity_seq asc,IS_BREAKABLE desc ");
            Dictionary<string, string> paramList = new Dictionary<string, string>();
            paramList.Add("REF_ID", referenceId);
            paramList.Add("SEQ_NO", sequenceNo);

            //Adding because duplicate data has been inserted

           // paramList.Add("REF_ID1", referenceId);
           // paramList.Add("SEQ_NO1", sequenceNo);

            objDB.bindGridView(gvChildReport, query.ToString(), paramList);
            //if (itemRate.Length > 0)
            //{
            //    btnSplitActivity.Visible = true;
            //}
            //else
            //{
            //    btnSplitActivity.Visible = false;
            //}
        }
    }

    protected void gvSORSplits_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            HiddenField hdChildReferenceID = new HiddenField();
            hdChildReferenceID = (HiddenField)e.Row.FindControl("hdChildReferenceID");
            string referenceId = hdChildReferenceID.Value;
            HiddenField hdChildSequenceNo = new HiddenField();
            hdChildSequenceNo = (HiddenField)e.Row.FindControl("hdChildSequenceNo");
            string sequenceNo = hdChildSequenceNo.Value;

            HiddenField hdActivityPercent = new HiddenField();
            hdActivityPercent = (HiddenField)e.Row.FindControl("hdActivityPercent");
            string activityPercent = hdActivityPercent.Value;

            HiddenField hdActivityId = new HiddenField();
            hdActivityId = (HiddenField)e.Row.FindControl("hdActivityId");
            string activityId = hdActivityId.Value;
            

            HiddenField hdIsBreakable = new HiddenField();
            hdIsBreakable = (HiddenField)e.Row.FindControl("hdIsBreakable");
            string isBreakable = hdIsBreakable.Value;

            HiddenField hdBEFrozen = new HiddenField();
            hdBEFrozen = (HiddenField)e.Row.FindControl("hdBEFrozen");

            HiddenField hdACFrozen = new HiddenField();
            hdACFrozen = (HiddenField)e.Row.FindControl("hdACFrozen");

            HiddenField hdRCMFrozen = new HiddenField();
            hdRCMFrozen = (HiddenField)e.Row.FindControl("hdRCMFrozen");

            Button btnChildSplitActivity = new Button();
            btnChildSplitActivity = (Button)e.Row.FindControl("btnChildSplitActivity");

            Label lblStatus=new Label();
            lblStatus = (Label)e.Row.FindControl("lblStatus");

           //check if Bill has been raised for the activity, don't allow to split the activity and disable Split button
            StringBuilder sbQuery=new StringBuilder();
            sbQuery.Append(@"select count(*)  
                                from rab_tender_bill   
                            where trim(SEQ_NO) =trim(:SEQ_NO)  
                                    AND trim(REF_ID) =trim(:REF_ID)  
                                    and trim(ACT_SEQ)=trim(:ACT_SEQ) ");
            Dictionary<string, string> paramList = new Dictionary<string, string>();
            paramList.Add("REF_ID", referenceId);
            paramList.Add("SEQ_NO", sequenceNo);
            paramList.Add("ACT_SEQ", activityId);

            string activityCount = objDB.executeScalar(sbQuery.ToString(),paramList);


            if ("Y".Equals(isBreakable) && ("Y".Equals(hdBEFrozen.Value) && "Y".Equals(hdACFrozen.Value) && "Y".Equals(hdRCMFrozen.Value)))
            {
                btnChildSplitActivity.Visible = true;
                lblStatus.Text = "";
            }
            else if ("Y".Equals(isBreakable) && ("R".Equals(hdBEFrozen.Value) && "N".Equals(hdACFrozen.Value) && "N".Equals(hdRCMFrozen.Value)))
            {
                btnChildSplitActivity.Text = "View";
                btnChildSplitActivity.Visible = true;
                lblStatus.Text = "Rejected by Billing Engineer";
            }
            else if ("Y".Equals(isBreakable) && ("Y".Equals(hdBEFrozen.Value) && "N".Equals(hdACFrozen.Value) && "N".Equals(hdRCMFrozen.Value)))
            {
                btnChildSplitActivity.Visible = false;
                lblStatus.Text = "Pending with AC";
            }
            else if ("Y".Equals(isBreakable) && ("Y".Equals(hdBEFrozen.Value) && "Y".Equals(hdACFrozen.Value) && "N".Equals(hdRCMFrozen.Value)))
            {
                btnChildSplitActivity.Visible = false;
                lblStatus.Text = "Pending with RCM";
            }
            else if ("N".Equals(isBreakable))
            {
                btnChildSplitActivity.Visible = false;
                lblStatus.Text = "";
            }
            else
            {
                btnChildSplitActivity.Visible = false;
                lblStatus.Text = "Approval Pending";
            }

            if (activityCount.Length > 0 && !"0".Equals(activityCount))
            {
                btnChildSplitActivity.Visible = false;
            }
        }
    }

    //protected void btnSplitActivity_Click(object sender, EventArgs e)
    //{
    //    String key = (sender as Button).Attributes["key"];
    //    String[] keys = key.Split('$');
    //    StringBuilder sbQuery = new StringBuilder();
    //    sbQuery.Append(" SELECT distinct to_char(ldesc) ldesc  ")
    //.Append("   FROM RAB_ITEM_BREAKUP a,icms_cba.cba_tender  b ")
    //.Append("   where upper(REF_ID)=:REF_ID ")
    //.Append("   and upper(B.SEQNO)=:SEQ_NO ")
    //.Append("   and A.SEQ_NO=B.SEQNO ")
    // .Append("  and b.JOB=:JOBNO ")
    // .Append("  and b.jtn=:TENDER_NO ");
        
    //    Dictionary<string, string> paramList = new Dictionary<string, string>();
    //        paramList.Add("REF_ID", keys[0].ToString());
    //        paramList.Add("SEQ_NO", keys[1].ToString());
    //        paramList.Add("JOBNO", ddJobNumber.SelectedValue);
    //        paramList.Add("TENDER_NO", ddTenderNo.SelectedValue);
    //    lblActivityDesc.Text = objDB.executeScalar( sbQuery.ToString(),paramList);
    //    bindSplittedGrid(keys[0].ToString(), keys[1].ToString());  
    //    ViewState["fileID"] = keys[0].ToString();
    //    ModalPopupExtenderForAssignRack.Show();
    //}

    protected void btnChildSplitActivity_Click(object sender, EventArgs e)
    {
        String key = (sender as Button).Attributes["key"];
        String[] keys = key.Split('$');
        lblActivityDesc.Text = keys[3].ToString();
        hdReferenceId.Value = keys[0].ToString();
        hdSequenceNumber.Value = keys[1].ToString();
        hdActivityPercentage.Value = keys[2].ToString();
        hdActivityId.Value = keys[4].ToString();
        hdBE_Frozen.Value = keys[5].ToString();

        if ("R".Equals(hdBE_Frozen.Value))
        {
            lblNote.Text = "Note: Kindly delete all the activities by clicking on delete all button <br/>and Add new activities as desired";
            btnDeleteAll.Visible = true;
            PnlInvoice.Visible = false;
        }
        else
        {
            btnDeleteAll.Visible = false;
            PnlInvoice.Visible = true;
            lblNote.Text = "";
        }

     //   if (lblActivityDesc.Text.Length < 1)
      //  {
            StringBuilder sbQuery = new StringBuilder();
   /*         sbQuery.Append(" SELECT distinct to_char(ldesc) ldesc  ")
        .Append("   FROM RAB_ITEM_BREAKUP a,icms_cba.cba_tender  b ")
        .Append("   where upper(REF_ID)=:REF_ID ")
        .Append("   and upper(B.SEQNO)=:SEQ_NO ")
        .Append("   and A.SEQ_NO=B.SEQNO ")
         .Append("  and b.JOB=:JOBNO ")
         .Append("  and b.jtn=:TENDER_NO ");
        */

            sbQuery.Append(@"select substr(ldesc,0,4000) ldesc
                                from
                                (
                                SELECT DISTINCT TO_CHAR (a.ldesc) ldesc
                                  FROM RAB_ITEM_BREAKUP a, icms_cba.cba_tender b
                                 WHERE     UPPER (REF_ID) =:REF_ID
                                       AND UPPER (B.SEQNO) =:SEQ_NO
                                       AND A.SEQ_NO = B.SEQNO
                                       AND b.JOB =:JOBNO
                                       AND b.jtn =:TENDER_NO
                                  union
                                  SELECT DISTINCT TO_CHAR (a.ldesc) ldesc
                                  FROM RAB_ITEM_BREAKUP a, CPMSTENDERS.VW_C_FOA_ITEMS_SITEMS b
                                 WHERE     UPPER (REF_ID) =:REF_ID
                                       AND UPPER (B.item_sl_no) =:SEQ_NO
                                       AND A.SEQ_NO = B.item_sl_no
                                       AND b.JOB_code =:JOBNO
                                       )");

            Dictionary<string, string> paramList = new Dictionary<string, string>();
            paramList.Add("REF_ID", keys[0].ToString());
            paramList.Add("SEQ_NO", keys[1].ToString());
            paramList.Add("JOBNO", ddJobNumber.SelectedValue);
            paramList.Add("TENDER_NO", ddTenderNo.SelectedValue);
            lblActivityDesc.Text = objDB.executeScalar(sbQuery.ToString(), paramList);
      //  }
        lblActivityPercent.Text = keys[2].ToString();
        bindSplittedGrid(keys[0].ToString(), keys[1].ToString());
        ViewState["fileID"] = keys[0].ToString();
        lblActivityError.Text = "";
        ModalPopupExtenderForAssignRack.Show();

        bindSplitRemarks();
    }

    protected void bindSplittedGrid(string referenceId, string sequenceNo)
    {
        StringBuilder query = new StringBuilder();
        query.Append(" select ACTIVITY_DESC , ")
            .Append(" ACTIVITY_PERCENT   ")
            .Append("    from RAB_TENDER_DETAILS ")
            .Append(" where REF_ID=:REF_ID ")
            .Append(" and SEQ_NO =:SEQ_NO ")

             //Adding because duplicate data has been inserted
            //Commented below line on 06-07-2017 as it was giving problem when two activities were splitted by same no for e.g. 5% each (It was missing one 5% from the list)
           //     .Append(" and ACTIVITY_ID in (select min(ACTIVITY_ID) from RAB_TENDER_DETAILS WHERE REF_ID =:REF_ID1 AND SEQ_NO =:SEQ_NO1 group by activity_percent)")
          .Append(" order by ACTIVITY_SEQ ");
        Dictionary<string, string> paramList = new Dictionary<string, string>();
        paramList.Add("REF_ID", referenceId);
        paramList.Add("SEQ_NO", sequenceNo);
        //Adding because duplicate data has been inserted
       // paramList.Add("REF_ID1", referenceId);
      //  paramList.Add("SEQ_NO1", sequenceNo);
        objDB.bindGridView(gvSORSplitted, query.ToString(), paramList);
    }

    protected void bindSplitRemarks()
    {
        Dictionary<string, string> paramList = new Dictionary<string, string>();
        paramList.Add("TENDER_NO", ddTenderNo.SelectedValue);
        paramList.Add("JOBNO", ddJobNumber.SelectedValue);

        objDB.bindGridView(gvSplitActivityRemarks, "SELECT JOB_NO,TENDER_NO,TENDER_DESC, REMARKS, USER_ROLE, USER_ACTION, ADDED_BY,GET_EMP_NAME(ADDED_BY) empName,ADDED_ON, TO_CHAR(ADDED_ON,'dd-Mon-yyyy') ADDEDON FROM RAB_SPLITTING_REMARKS WHERE JOB_NO =:JOBNO and TENDER_NO=:TENDER_NO   order by (ADDED_ON) desc", paramList);
    }

    protected void btnDeleteAll_Click(object sender, EventArgs e)
    {
        lblActivityPercent.Text = "95";
        hdActivityPercentage.Value = "95";
        int recordsAffected = 0;        
        ArrayList queryList = new ArrayList();
        ArrayList paramList = new ArrayList();  
        StringBuilder sbDeleteAllQry = new StringBuilder();
        sbDeleteAllQry.Append("DELETE FROM RAB_TENDER_DETAILS WHERE REF_ID=:REF_ID AND SEQ_NO=:SEQ_NO AND IS_BREAKABLE='Y'");
        Dictionary<string, string> deleteParam = new Dictionary<string, string>();
        deleteParam.Add("REF_ID", hdReferenceId.Value);
        deleteParam.Add("SEQ_NO", hdSequenceNumber.Value);
        queryList.Add(sbDeleteAllQry.ToString());
        paramList.Add(deleteParam);    
        StringBuilder sbQuery = new StringBuilder();
            sbQuery.Append(" insert into RAB_TENDER_DETAILS ")
                    .Append(" ( ")
                    .Append("   REF_ID       , ")
                    .Append("  SEQ_NO       ,  ")
                    .Append("   ACTivity_PERCENT, ")
                    .Append("  ACTivity_SEQ ,  ")
                    .Append("  added_by , ")
                    .Append("  ACTIVITY_DESC,BE_FROZEN,AC_FROZEN, RCM_FROZEN ")
                    .Append("  ) values (")
                    .Append("   :REF_ID       , ")
                    .Append("  :SEQ_NO       ,  ")
                    .Append("   :ACTivity_PERCENT, ")
                    .Append("  :ACTivity_SEQ ,  ")
                    .Append("  :added_by , ")
                    .Append("  :ACTIVITY_DESC,:BE_FROZEN,:AC_FROZEN, :RCM_FROZEN )");

            Dictionary<string, string> param = new Dictionary<string, string>();            
            param.Add("REF_ID", hdReferenceId.Value);
            param.Add("SEQ_NO", hdSequenceNumber.Value);
            param.Add("ACTivity_PERCENT", "95");
            param.Add("ACTivity_SEQ", "2");
            param.Add("added_by", Session["USERID"].ToString());
            param.Add("ACTIVITY_DESC", "Split Activities as desired");
            //param.Add("BE_FROZEN", "N");
            //param.Add("AC_FROZEN", "N");
            //param.Add("RCM_FROZEN", "N");
            param.Add("BE_FROZEN", "Y");
            param.Add("AC_FROZEN", "Y");
            param.Add("RCM_FROZEN", "Y");

            queryList.Add(sbQuery.ToString());
            paramList.Add(param);           
        
            if (queryList.Count > 1)
            {
                string[] queryArray = new String[queryList.Count];
                Dictionary<string, string>[] paramListArray = new Dictionary<string, string>[paramList.Count];
                for(int ii=0;ii<queryList.Count;ii++)
                {
                    queryArray[ii]=queryList[ii].ToString();
                    paramListArray[ii]= (Dictionary<string, string>)paramList[ii];
                }
                if (queryArray.Length > 0)
                 recordsAffected =   objDB.executeTransaction(queryArray, paramListArray);
            }
          //  bindSplittedGrid(hdReferenceId.Value, hdSequenceNumber.Value);
            ViewState["fileID"] = hdReferenceId.Value;
        // After deleting hide the pop-up and show the previous page grid
        ModalPopupExtenderForAssignRack.Hide();
        //bindSor(ddJobNumber.SelectedValue, ddTenderNo.SelectedValue);
        bindSORItems(hdReferenceId.Value, ddJobNumber.SelectedValue);
        //Response.Redirect("RA_SplitActivity?jobNo="+ddJobNumber.SelectedValue+"&tenderNo="+ddTenderNo.SelectedValue);
    }
    
    protected void btnSubmit_Click(object sender, EventArgs e)
    {
        lblActivityError.Text = "";
        Button1.Enabled = false;
        if (Page.IsValid && CheckMandatoryInput())
        {
            Dictionary<int, string[]> activities = new Dictionary<int, string[]>();
            double percentageBreakup = 0;
            for (int i = 1; i <= int.Parse(Request["inpTot"]); i++)
            {
                string[] values = GetValues(i);
                if (values != null)
                {
                    activities.Add(i, values);
                    percentageBreakup = percentageBreakup + double.Parse(values[1].ToString());
                }
            }

            if (percentageBreakup == double.Parse(hdActivityPercentage.Value.ToString()))
            {
                if (activities.Keys.Count > 0)
                {
                    if (InsertActivities(activities))
                    {
                        ShowMessage("Activity Added", false, String.Empty);
                        gvSOR_SelectedIndexChanged(sender, e);
                    }
                    else
                    {
                        ShowMessage("Activity Addition Failed, Try Again", true, String.Empty);
                    }
                }
            }
            else
            {
                lblActivityError.Text = "Error: Percentage breakup does not match actual value.Kindly correct";
                ModalPopupExtenderForAssignRack.Show();
            }                
        }
        else 
        {
            lblActivityError.Text= "Error: Kindly fill the Activity description and Percentage.";
            ModalPopupExtenderForAssignRack.Show();
        }
        Button1.Enabled = true;
    }

    private void ShowMessage(string Msg, bool IsError, string RedirectURL)
    {
        Common.Show(Msg);        
    }

    private bool InsertActivities(Dictionary<int, string[]> activity)
    {
        int recordsAffected = 0;
        int i = 0;
        ArrayList queryList = new ArrayList();
        ArrayList paramList = new ArrayList();       
        
        //Delete the existing record and insert other activities for the deleted activity
        StringBuilder sbDeleteQuery = new StringBuilder();
        Dictionary<string, string> deleteParam = new Dictionary<string, string>();
        sbDeleteQuery.Append("DELETE FROM RAB_TENDER_DETAILS WHERE REF_ID=:REF_ID and SEQ_NO=:SEQ_NO and ACTivity_PERCENT=:ACTivity_PERCENT and ACTIVITY_ID=:ACTIVITY_ID and IS_BREAKABLE='Y'");
        deleteParam.Add("REF_ID", hdReferenceId.Value);
        deleteParam.Add("SEQ_NO", hdSequenceNumber.Value);
        deleteParam.Add("ACTivity_PERCENT", hdActivityPercentage.Value);
        deleteParam.Add("ACTIVITY_ID", hdActivityId.Value);
        queryList.Add(sbDeleteQuery.ToString());
        paramList.Add(deleteParam); 
        foreach (KeyValuePair<int, string[]> item in activity)
        {
            StringBuilder sbQuery = new StringBuilder();
            sbQuery.Append(" insert into RAB_TENDER_DETAILS ")
                    .Append(" ( ")
                    .Append("   REF_ID       , ")
                    .Append("  SEQ_NO       ,  ")
                    .Append("   ACTivity_PERCENT, ")
                    .Append("  ACTivity_SEQ ,  ")
                    .Append("  added_by , ")
                    .Append("  ACTIVITY_DESC,BE_FROZEN,AC_FROZEN, RCM_FROZEN ")
                    .Append("  ) values (")
                    .Append("  :REF_ID       , ")
                    .Append("  :SEQ_NO       ,  ")
                    .Append("  :ACTivity_PERCENT, ")
                    .Append("  :ACTivity_SEQ ,  ")
                    .Append("  :added_by , ")
                    .Append("  :ACTIVITY_DESC,:BE_FROZEN,:AC_FROZEN, :RCM_FROZEN )");
            Dictionary<string, string> param = new Dictionary<string, string>();
            i++;
            param.Add("REF_ID", hdReferenceId.Value);
            param.Add("SEQ_NO", hdSequenceNumber.Value);
            param.Add("ACTivity_PERCENT", item.Value[1]);
            param.Add("ACTivity_SEQ", i.ToString());
            param.Add("added_by", Session["USERID"].ToString());
            param.Add("ACTIVITY_DESC", item.Value[0]);
            param.Add("BE_FROZEN", "N");
            param.Add("AC_FROZEN", "N");
            param.Add("RCM_FROZEN", "N");
            queryList.Add(sbQuery.ToString());
            paramList.Add(param);            
        }
        if (queryList.Count > 1)
        {
                string[] queryArray = new String[queryList.Count];
                Dictionary<string, string>[] paramListArray = new Dictionary<string, string>[paramList.Count];
                for(int ii=0;ii<queryList.Count;ii++)
                {
                    queryArray[ii]=queryList[ii].ToString();
                    paramListArray[ii]= (Dictionary<string, string>)paramList[ii];
                }
                if (queryArray.Length > 0)
                 recordsAffected =   objDB.executeTransaction(queryArray, paramListArray);
        }
        if (recordsAffected > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    private bool InvoiceNotExist(string[] p)
    {
        throw new NotImplementedException();
    }

    private string[] GetValues(int i)
    {
        if (Validate(Request["txtActDesc" + i], "ACTDESC") == null ||
                    Validate(Request["txtActPercent" + i], "ACTPERCENT") == null)
        {
            return null;
        }
        else
        {
            return new string[] { 
                    Validate(Request["txtActDesc" + i], "ACTDESC"),
                    Validate(Request["txtActPercent" + i], "ACTPERCENT")
                };
        }
    }

    private string Validate(string Value, string Type)
    {
        string ReturnVal = String.Empty;

        switch (Type)
        {
            case "ACTDESC":
                if (Value.Length > 500)
                {
                    Value = Value.Substring(0, 499);
                }

               // if (!String.IsNullOrEmpty(Value) && Value.Length < 500 && Value.IndexOf(",") <= 0)
                if (!String.IsNullOrEmpty(Value) && Value.Length < 500 )
                {
                    ReturnVal = Value;
                }
                else
                {
                    ReturnVal = null;
                }                
                break;
            case "ACTPERCENT":

                double invamt = 0;
                double.TryParse(Value, out invamt);

                if (!String.IsNullOrEmpty(Value) && Value.Length < 12 && invamt != 0)
                {
                    ReturnVal = Value;
                }
                else
                {
                    ReturnVal = null;
                }
                break;           
            default:
                ReturnVal = null;
                break;
        }
        return ReturnVal.ParseSQL();
    }

    private bool CheckMandatoryInput()
    {
        int totInput = 0;
        int.TryParse(Request["inpTot"], out totInput);
        if (Request["inpTot"] == null || totInput == 0)
        {
            return false;          
        }
        return true;
    }
}