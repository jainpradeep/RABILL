using System;
using System.Collections.Generic;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using AppCode;
using System.Text;
using System.Collections;
using System.Data.Common;
using System.Data;
using ClosedXML.Excel;
using System.IO;
using System.Text.RegularExpressions;

public partial class RA_CompleteBill_jobNo : System.Web.UI.Page
{
    dbFunction objDB = new dbFunction();
    protected void Page_Load(object sender, EventArgs e)
    {
        if (Session["USERID"] == null)
        {
            Response.Redirect("Login.aspx");
        }
        if (!IsPostBack)
        {
            if (Session["USERID"] != null && Session["ROLE"] != null)
            {
                bindJobNumber(Session["USERID"].ToString(), Session["ROLE"].ToString());
            }
            else
            {
                Response.Redirect("Login.aspx");
            }
        }
    }

    protected void bindJobNumber(string userId, string userRole)
    {
        StringBuilder sbQuery = new StringBuilder();
        Dictionary<string, string> paramList = new Dictionary<string, string>();
        if ("VEND".Equals(userRole))
        {
            sbQuery.Append("SELECT DISTINCT JOB_NO FROM RAB_TENDER_MASTER where C_CODE=:C_CODE");
            paramList.Add("C_CODE", userId);
        }
        else if ("BE".Equals(userRole) || "AC".Equals(userRole))
        {
            sbQuery.Append("SELECT DISTINCT JOB_NO FROM RAB_TENDER_USERS where ROLE=:ROLE and EMPNO=:EMPNO and ACTIVE='Y'  ORDER BY JOB_NO");
            paramList.Add("ROLE", userRole);
            paramList.Add("EMPNO", userId);
        }
        else if ("RCM".Equals(userRole))
        {
            sbQuery.Append("SELECT distinct JOB_NO FROM JOB_DIR WHERE SITE_CD IN (SELECT SITE_CD FROM SITE_DIR WHERE EMPNO_RCM=:EMPNO_RCM) ORDER BY JOB_NO");
            paramList.Add("EMPNO_RCM", userId);
        }

        if (sbQuery.Length > 0)
            objDB.bindDropDownList(ddJobNumber, sbQuery.ToString(), paramList, "JOB_NO", "JOB_NO", "", "--Select Job Number--");
    }

    protected void bindTenders(string jobNumber)
    {
        StringBuilder sbQuery = new StringBuilder();
        Dictionary<string, string> paramList = new Dictionary<string, string>();

        if ("BE".Equals(Session["ROLE"].ToString()) || "AC".Equals(Session["ROLE"].ToString()))
        {
            sbQuery.Append("SELECT DISTINCT TENDER_NO, tenderno||' ( '||b.title||' '||b.title1||')' description  ")
            .Append(" FROM  RAB_TENDER_USERS a,ppms.tenderschedule b ")
               .Append(" WHERE JOB_NO=:JOB_NO ")
               .Append(" AND EMPNO=:EMPNO ")
               .Append(" AND ROLE=:ROLE ")
               .Append(" and upper(trim(b.projno))=upper(trim(A.JOB_NO))")
              .Append(" and A.TENDER_NO=b.tendersrno")
               .Append(" ORDER BY TENDER_NO ");

            paramList.Add("JOB_NO", jobNumber.ToUpper());
            paramList.Add("EMPNO", Session["USERID"].ToString());
            paramList.Add("ROLE", Session["ROLE"].ToString());

        }
        else if ("VEND".Equals(Session["ROLE"].ToString()))
        {
            sbQuery.Append(" Select DISTINCT TENDER_NO , tenderno||' ( '||b.title||' '||b.title1||')' description ")
             .Append(" FROM RAB_TENDER_MASTER a,ppms.tenderschedule b")
              .Append(" WHERE JOB_NO=:JOB_NO ")
              .Append(" and C_CODE=:C_CODE ")
              .Append(" and upper(trim(b.projno))=upper(trim(A.JOB_NO))")
              .Append(" and A.TENDER_NO=b.tendersrno")
              .Append(" ORDER BY TENDER_NO ");
            paramList.Add("JOB_NO", jobNumber.ToUpper());
            paramList.Add("C_CODE", Session["USERID"].ToString());
        }
        else
        {
            sbQuery.Append(" Select DISTINCT TENDER_NO, tenderno||' ( '||b.title||' '||b.title1||')' description ")
                      .Append(" FROM RAB_TENDER_MASTER a,ppms.tenderschedule b")
                     .Append(" WHERE JOB_NO=:JOB_NO ")
                     .Append(" and upper(trim(b.projno))=upper(trim(A.JOB_NO))")
                     .Append(" and A.TENDER_NO=b.tendersrno")
                     .Append(" ORDER BY TENDER_NO");

            paramList.Add("JOB_NO", jobNumber.ToUpper());
        }

        objDB.bindDropDownList(ddTenderNo, sbQuery.ToString(), paramList, "TENDER_NO", "description", "", "--Select Tender Number--");
    }

    protected void ddJobNumber_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (!"".Equals(ddJobNumber.SelectedValue))
        {
            bindTenders(ddJobNumber.SelectedValue);
        }
        else
        {
            Common.Show("Please select Job Number");
        }
    }

    protected void ddTenderNo_SelectedIndexChanged(object sender, EventArgs e)
    {      
    }

    protected void btnGenerate_Click(object sender, EventArgs e)
    {
        if ("".Equals(ddJobNumber.SelectedValue) && "".Equals(ddTenderNo.SelectedValue))
        {
            Common.Show("Error: Please select Job No and Tender No.");
            lblError.Text = "Error: Please select Job No and Tender No.";
        }
        else
        {
            generateBill(ddJobNumber.SelectedValue, ddTenderNo.SelectedValue);
        }
    }

    protected void generateBill(string jobNumber, string tenderNo)
    {

    //select REF_ID, SEQ_NO,ra_get_seq_desc(SEQ_NO, SORNO) act_desc, ITEM_RATE, UOM, SORT_NO, ACT_DESC, ACT_PERCENT, ACT_SEQ, ADDED_ON, HO_QTY, SITE_QTY, FLAG_HO, SORNO 
    //from RAB_ITEM_BREAKUP b 
    //where b.ref_id in (
    //select ref_id from rab_tender_master a where A.JOB_NO='A133' and A.TENDER_NO='8000'
    //) order by b.SEQ_NO,b.SORT_NO
        DataTable dtfinalData = new DataTable();

        dtfinalData.Columns.Add("SOR S. No", typeof(string));
        dtfinalData.Columns.Add("SOR Item No.", typeof(string));
        dtfinalData.Columns.Add("Item", typeof(string));
        dtfinalData.Columns.Add("UOM", typeof(string));
        dtfinalData.Columns.Add("SOR Quantity", typeof(string));
        dtfinalData.Columns.Add("SOR Rate", typeof(string));
        dtfinalData.Columns.Add("Part Rate", typeof(string));
        dtfinalData.Columns.Add("Quantity Up to Prev. Bill", typeof(string));
        dtfinalData.Columns.Add("Quantity Since Prev. Bill", typeof(string));
        dtfinalData.Columns.Add("Quantity Up to Date", typeof(string));
        dtfinalData.Columns.Add("Amount Upto Prev. Bill", typeof(string));
        dtfinalData.Columns.Add("Amount Since Prev. Bill", typeof(string));
        dtfinalData.Columns.Add("Amount Upto. Date", typeof(string));
        dtfinalData.Columns.Add("Remarks", typeof(string));
        StringBuilder sbQuery = new StringBuilder();
        sbQuery.Append("select b.REF_ID, SEQ_NO,ra_get_seq_desc(SEQ_NO, SORNO) act_desc, nvl(ITEM_RATE_EDITED,ITEM_RATE) ITEM_RATE, UOM, SORT_NO, ACT_PERCENT, ACT_SEQ, ADDED_ON, HO_QTY, SITE_QTY, FLAG_HO, SORNO,BB.TEND_SOR_ID ")
    .Append(" from RAB_ITEM_BREAKUP b , RAB_TENDER_MASTER bb ")
    .Append(" where b.ref_id in ( ")
    .Append(" select ref_id from rab_tender_master a where A.JOB_NO=:JOB_NO and A.TENDER_NO=:TENDER_NO ")
    .Append(" ) ")
    .Append(" and B.REF_ID= BB.REF_ID ")
        .Append(" order by b.SEQ_NO,b.SORT_NO ");
        Dictionary<string, string> paramList = new Dictionary<string, string>();
        paramList.Add("JOB_NO", jobNumber);
        paramList.Add("TENDER_NO", tenderNo);
        //Generating all header
        DataTable dtItemsHeader = new DataTable();
        dtItemsHeader = objDB.bindDataTable(sbQuery.ToString(), paramList);
        
        //Binding Child values and merging it with main datatable
        int i = 0;
        foreach (DataRow dr in dtItemsHeader.Rows)
        {
            string refId = "";
            string seqNumber = "";
            string sorNumber = "";
            string longDesc = "";
            string UOM = "";
            string SORQty = "";
            string itemRate = "";
            string tenderSORId = "";
            string actPercent = "";
            refId = dr["ref_id"].ToString();
            seqNumber = dr["SEQ_NO"].ToString();
            sorNumber = dr["SORNO"].ToString();
            longDesc = dr["act_desc"].ToString();
            UOM = dr["uom"].ToString();
            SORQty = dr["ho_qty"].ToString();
            itemRate = dr["ITEM_RATE"].ToString();
            tenderSORId = dr["TEND_SOR_ID"].ToString();
            actPercent = dr["ACT_PERCENT"].ToString();
            dtfinalData.Rows.Add(++i, seqNumber, CleanInvalidXmlChars(longDesc), "", "", "", "", "", "", "", "", "", "", "");
            //dtfinalData.Rows.Add(++i, seqNumber, CleanInvalidXmlChars(longDesc), UOM, SORQty, itemRate, actPercent, "", "", "", "", "", "", "");

            StringBuilder sbQueryDetail = new StringBuilder();
            sbQueryDetail.Append(" select distinct TEND_SOR_ID,REF_ID,SEQ_NO,ACTIVITY_DESC , ")
                  .Append("  ACTIVITY_PERCENT,IS_BREAKABLE,ACTIVITY_ID ,")
                //.Append(" ((ITEM_RATE * HO_QTY)*ACTIVITY_PERCENT/100)  activityAmt,  ")
                //.Append("  (HO_QTY*ACTIVITY_PERCENT/100) activityQty ,")
                 .Append(" nvl(AC_IS_FROZEN,'N') frozen ,CONT_IS_FROZEN,CONT_QTY,BENGG_IS_FROZEN,AC_IS_FROZEN,RCM_IS_FROZEN, ")
                .Append("   BENGG_QTY,AC_QTY,nvl(RCM_QTY,0) RCM_QTY,RUN_SL_NO  ")
                 .Append("  from VW_RA_BILL_ITEMs_detail  ")
                 .Append("  where REF_ID=:REF_ID ")
                 .Append(" and SEQ_NO=:SEQ_NO ")
               //  .Append(" and RA_BLL_NO=:RA_BLL_NO ")
                 .Append(" order by REF_ID,SEQ_NO ");
            Dictionary<string, string> paramListDetail = new Dictionary<string, string>();
            paramListDetail.Add("REF_ID", refId);
            paramListDetail.Add("SEQ_NO", seqNumber);
          //  paramListDetail.Add("RA_BLL_NO", ViewState["RA_BLL_NO"].ToString());
            DataTable dtItemsBilling = new DataTable();
            dtItemsBilling = objDB.bindDataTable(sbQueryDetail.ToString(), paramListDetail);

            //Binding Child values and merging it with main datatable
            int childSequence = 0;
            foreach (DataRow drChild in dtItemsBilling.Rows)
            {                
                childSequence++;
                string uptoPreviousBillQty = "0";
                uptoPreviousBillQty = getTotalActivityCompleted(refId, seqNumber, tenderSORId);
                string sincePreviousBillQty = "0";
                sincePreviousBillQty = drChild["RCM_QTY"].ToString();
                string uptoPreviousBillAmt = "0";
                if (itemRate.Length > 0)
                {
                    uptoPreviousBillAmt = (float.Parse(uptoPreviousBillQty) * float.Parse(itemRate)).ToString();
                }
                string uptoPreviousBillTotalQty = "0";
                uptoPreviousBillTotalQty = (float.Parse(uptoPreviousBillQty) + float.Parse(sincePreviousBillQty)).ToString();

                string sincePreviousBillAmt = "0";
                if (itemRate.Length > 0)
                {
                    sincePreviousBillAmt = (float.Parse(sincePreviousBillQty) * float.Parse(itemRate)).ToString();
                }
                string sincePreviousBillTotalAmt = "0";

                sincePreviousBillTotalAmt = (float.Parse(uptoPreviousBillAmt) + float.Parse(sincePreviousBillAmt)).ToString();

                //  dtfinalData.Rows.Add("", "", drChild["ACTIVITY_DESC"].ToString(), UOM, SORQty, itemRate, drChild["ACTIVITY_PERCENT"].ToString(), "", "", "", "", "", "", "");
                dtfinalData.Rows.Add("", childSequence, CleanInvalidXmlChars(drChild["ACTIVITY_DESC"].ToString()), UOM, SORQty, itemRate, drChild["ACTIVITY_PERCENT"].ToString(), uptoPreviousBillQty, sincePreviousBillQty, uptoPreviousBillTotalQty, uptoPreviousBillAmt, sincePreviousBillAmt, sincePreviousBillTotalAmt, "");
            }
        }
        Session["RABILL_COMPLETE"] = dtfinalData;
        //ViewState["RABILL"] = dtfinalData;
        Response.Redirect("RA_Bill_Excel.aspx");
        // ExportToExcelXML();
    }

    public static string CleanInvalidXmlChars(string text)
    {
        // From xml spec valid chars: 
        // #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]     
        // any Unicode character, excluding the surrogate blocks, FFFE, and FFFF. 
        string re = @"[^\x09\x0A\x0D\x20-\xD7FF\xE000-\xFFFD\x10000-x10FFFF]";
        return Regex.Replace(text, re, "");
    }

    protected string getTotalActivityCompleted(string refId, string seqNo, string tenderSorId)
    {
        string qty = "0";
        StringBuilder sbQuery = new StringBuilder();
        sbQuery.Append("select nvl(sum(rcm_qty),0) totalQty ")
        .Append(" from rab_tender_bill a where REF_ID=:REF_ID  ")
        .Append(" and SEQ_NO=:SEQ_NO and TEND_SOR_ID=:TEND_SOR_ID ")
        .Append(" and act_seq in ")
        .Append(" (select activity_id from rab_tender_details ")
        .Append(" where REF_ID=a.ref_id    and SEQ_NO=a.SEQ_NO) ")
        .Append(" and RCM_IS_FROZEN='Y' ")
        .Append("group by REF_ID, SEQ_NO, TEND_SOR_ID");
        Dictionary<string, string> paramList = new Dictionary<string, string>();
        paramList.Add("REF_ID", refId);
        paramList.Add("SEQ_NO", seqNo);
        paramList.Add("TEND_SOR_ID", tenderSorId);

        qty = objDB.executeScalar(sbQuery.ToString(), paramList);

        if (qty.Length == 0)
        {
            qty = "0";
        }
        return qty;
    }

}