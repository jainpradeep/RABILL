using System;
using System.Collections.Generic;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using AppCode;
using System.Text;
using System.Collections;


public partial class RA_Edit_SOR_Rates : System.Web.UI.Page
{
    dbFunction objDB = new dbFunction();
    protected void Page_Load(object sender, EventArgs e)
    {
        if (Session["USERID"] == null)
        {
            Response.Redirect("Login.aspx");
        }
        // Session["USERID"] = "B415";
        if (ViewState["TXTCOUNT"] == null)
        {
            ViewState["TXTCOUNT"] = 0;
        }
        if (!IsPostBack)
        {
            if (Session["USERID"] != null && Session["ROLE"] != null && (("VEND".Equals(Session["ROLE"].ToString())) || ("BE".Equals(Session["ROLE"].ToString()))  || ("AC".Equals(Session["ROLE"].ToString())) || ("RCM".Equals(Session["ROLE"].ToString())) ) )
            {
                bindJobNumber(Session["USERID"].ToString(), Session["ROLE"].ToString());
            }
            else
            {
                Common.Show("This option is valid for Contractor/BE/AC/RCM only");
                Response.Redirect("Default.aspx");
            }           
        }
    }

    protected void bindJobNumber(string userId)
    {
        StringBuilder sbQuery = new StringBuilder();        
        Dictionary<string, string> paramList = new Dictionary<string, string>();
        sbQuery.Append("SELECT DISTINCT JOB_NO FROM RAB_TENDER_MASTER where C_CODE=:C_CODE order by JOB_NO");
        paramList.Add("C_CODE", userId);
        objDB.bindDropDownList(ddJobNumber, sbQuery.ToString(), paramList, "JOB_NO", "JOB_NO", "", "--Select Job Number--");
    }   

    protected void bindJobNumber(string userId, string userRole)
    {
        StringBuilder sbQuery = new StringBuilder();
        Dictionary<string, string> paramList = new Dictionary<string, string>();
        if ("VEND".Equals(userRole))
        {
            sbQuery.Append("SELECT DISTINCT JOB_NO FROM RAB_TENDER_MASTER where C_CODE=:C_CODE ORDER BY JOB_NO");
            paramList.Add("C_CODE", userId);
        }
        else if ("BE".Equals(userRole) || "AC".Equals(userRole))
        {
            sbQuery.Append("SELECT DISTINCT JOB_NO FROM RAB_TENDER_USERS where ROLE=:ROLE and EMPNO=:EMPNO and ACTIVE='Y'  ORDER BY JOB_NO");
            paramList.Add("ROLE", userRole);
            paramList.Add("EMPNO", userId);
        }
        else if ("RCM".Equals(userRole))
        {
            sbQuery.Append("SELECT distinct JOB_NO FROM JOB_DIR WHERE SITE_CD IN (SELECT SITE_CD FROM SITE_DIR WHERE EMPNO_RCM=:EMPNO_RCM) ORDER BY JOB_NO");
            paramList.Add("EMPNO_RCM", userId);
        }

        if (sbQuery.Length > 0)
            objDB.bindDropDownList(ddJobNumber, sbQuery.ToString(), paramList, "JOB_NO", "JOB_NO", "", "--Select Job Number--");
    }


    protected void bindTenders_old(string jobNumber)
    {
        StringBuilder sbQuery = new StringBuilder();
        Dictionary<string, string> paramList = new Dictionary<string, string>();
        sbQuery.Append(" Select DISTINCT TENDER_NO , tenderno||' ( '||b.title||' '||b.title1||')' description ")
             .Append(" FROM RAB_TENDER_MASTER a,ppms.tenderschedule b")
              .Append(" WHERE JOB_NO=:JOB_NO ");
              if ("VEND".Equals(Session["ROLE"].ToString()))
              { 
                  sbQuery.Append(" and C_CODE=:C_CODE ");
                  paramList.Add("C_CODE", Session["USERID"].ToString());
              }
              sbQuery.Append(" and upper(trim(b.projno))=upper(trim(A.JOB_NO))")
              .Append(" and A.TENDER_NO=b.tendersrno")
              .Append(" ORDER BY TENDER_NO ");       
              paramList.Add("JOB_NO", jobNumber.ToUpper());
      
        objDB.bindDropDownList(ddTenderNo, sbQuery.ToString(), paramList, "TENDER_NO", "description", "", "--Select Job Number--");
    }


    protected void bindTenders(string jobNumber)
    {
        StringBuilder sbQuery = new StringBuilder();
        Dictionary<string, string> paramList = new Dictionary<string, string>();
        if ("BE".Equals(Session["ROLE"].ToString()) || "AC".Equals(Session["ROLE"].ToString()))
        {
            sbQuery.Append("SELECT DISTINCT b.TENDER_NO||'~'||b.part_no tender_part, b.tender_no||'-'|| b.part_no || ' ( '||b.TITLE||')' description  ")
             .Append(" FROM  RAB_TENDER_USERS a,RAB_TENDER_MASTER b ")
               .Append(" WHERE b.JOB_NO=:JOB_NO ")
               .Append(" AND EMPNO=:EMPNO ")
               .Append(" AND ROLE=:ROLE ")
               .Append(" and b.job_no=A.JOB_NO")
              .Append(" and A.TENDER_NO=b.TENDER_NO")
              .Append(" and A.PART_NO=b.PART_NO")
               .Append(" ORDER BY tender_part ");

            paramList.Add("JOB_NO", jobNumber.ToUpper());
            paramList.Add("EMPNO", Session["USERID"].ToString());
            paramList.Add("ROLE", Session["ROLE"].ToString());

        }
        else if ("VEND".Equals(Session["ROLE"].ToString()))
        {
            sbQuery.Append(" SELECT DISTINCT ")
              .Append("TENDER_NO||'~'||a.part_no tender_part, ")
              .Append(" tender_no||'-'|| a.part_no||' ( '||A.TITLE||')'  description ")
              .Append(" FROM RAB_TENDER_MASTER a ")
               .Append("WHERE     JOB_NO =:JOB_NO ")
              .Append("  AND C_CODE =:C_CODE ")
               .Append("ORDER BY tender_part ");

            paramList.Add("JOB_NO", jobNumber.ToUpper());
            paramList.Add("C_CODE", Session["USERID"].ToString());
        }
        else
        {
            sbQuery.Append(@" Select DISTINCT TENDER_NO||'~'||a.part_no tender_part, 
                                        tender_no||'-'|| a.part_no||' ( '||a.TITLE||')'  description
                              FROM RAB_TENDER_MASTER a 
                              WHERE JOB_NO=:JOB_NO 
                              ORDER BY tender_part");
            paramList.Add("JOB_NO", jobNumber.ToUpper());
        }

        objDB.bindDropDownList(ddTenderNo, sbQuery.ToString(), paramList, "tender_part", "description", "", "--Select Tender Number--");
    }

    protected void ddJobNumber_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (!"".Equals(ddJobNumber.SelectedValue))
        {
            bindTenders(ddJobNumber.SelectedValue);
            pnlSORItems.Visible = false;            
        }
        else
        {
            Common.Show("Please select Job Number");
        }
    }

    protected void ddTenderNo_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (!"".Equals(ddJobNumber.SelectedValue) && !"".Equals(ddTenderNo.SelectedValue))
        {
            string[] strArray = ddTenderNo.SelectedValue.Split('~');
            bindSorList(ddJobNumber.SelectedValue, strArray[0]);            
            pnlSORItems.Visible = false;            
        }
        else
        {
            Common.Show("Please select Job Number and Tender Number");
        }
    }

    protected void bindSorList(string jobNumber, string tenderNo)
    {
        StringBuilder sbQuery = new StringBuilder();
        Dictionary<string, string> paramList = new Dictionary<string, string>();
        if ("VEND".Equals(Session["ROLE"].ToString()))
        {
        sbQuery.Append(@"SELECT distinct REF_ID||'~'||SOR_NO SOR_NO_refid,  SOR_NO
                        FROM RAB_TENDER_MASTER 
                        where upper(JOB_NO)=:JOB_NO 
                                AND upper(TENDER_NO)=:TENDER_NO 
                                AND C_CODE=:C_CODE  
                        order by SOR_NO ");
                paramList.Add("C_CODE", Session["USERID"].ToString());
                paramList.Add("JOB_NO", jobNumber.ToUpper());
                paramList.Add("TENDER_NO", tenderNo.ToUpper());
        }
        else if ("BE".Equals(Session["ROLE"].ToString()) || "AC".Equals(Session["ROLE"].ToString()))
        {
            sbQuery.Append("SELECT DISTINCT b.REF_ID||'~'||b.SOR_NO SOR_NO_refid,  SOR_NO  ")
             .Append(" FROM  RAB_TENDER_USERS a,RAB_TENDER_MASTER b ")
               .Append(" WHERE b.JOB_NO=:JOB_NO ")
               .Append(" AND EMPNO=:EMPNO ")
               .Append(" AND ROLE=:ROLE ")
               .Append(" and b.job_no=A.JOB_NO")
              .Append(" and A.TENDER_NO=b.TENDER_NO")
              .Append(" and A.PART_NO=b.PART_NO")
               .Append(" ORDER BY tender_part ");

            paramList.Add("JOB_NO", jobNumber.ToUpper());
            paramList.Add("EMPNO", Session["USERID"].ToString());
            paramList.Add("ROLE", Session["ROLE"].ToString());

        }
        else
        {
            sbQuery.Append(@"SELECT distinct REF_ID||'~'||SOR_NO SOR_NO_refid,  SOR_NO
                        FROM RAB_TENDER_MASTER 
                        where upper(JOB_NO)=:JOB_NO 
                                AND upper(TENDER_NO)=:TENDER_NO                                 
                        order by SOR_NO ");         
            paramList.Add("JOB_NO", jobNumber.ToUpper());
            paramList.Add("TENDER_NO", tenderNo.ToUpper());
        }
        
        objDB.bindDropDownList(ddSORNo, sbQuery.ToString(), paramList, "SOR_NO_refid", "SOR_NO", "", "--Select SOR Number--");
    }

    protected void ddSORNo_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (!"".Equals(ddJobNumber.SelectedValue) && !"".Equals(ddTenderNo.SelectedValue) && !"".Equals(ddSORNo.SelectedValue))
        {
            string[] strArray = ddSORNo.SelectedValue.Split('~');
            bindSORItems(strArray[0], ddJobNumber.SelectedValue);
            pnlSORItems.Visible = true;                     
            bindSORRebate(strArray[0]);

            // Check if any bill has been raised, hide the editing of rebate for Vendor
            if ("VEND".Equals(Session["ROLE"].ToString()))
            {
                Dictionary<string, string> paramList = new Dictionary<string, string>();
                paramList.Add("REF_ID", strArray[0]);
                string countRaisedBills = objDB.executeScalar("select count (distinct RA_FINAL_BILL_NO) from RAB_TENDER_BILL where ref_ID=:REF_ID", paramList);

                if (countRaisedBills.Equals("0"))
                {
                    trSorEdit.Visible = true;
                    gvSORItems.Columns[gvSORItems.Columns.Count - 1].Visible = true;
                }
                else
                {
                    trSorEdit.Visible = false;
                    gvSORItems.Columns[gvSORItems.Columns.Count - 1].Visible = false;
                }
            }
            else if ("AC".Equals(Session["ROLE"].ToString()) || "RCM".Equals(Session["ROLE"].ToString()))
            {
                trSorEdit.Visible = false;
                gvSORItems.Columns[gvSORItems.Columns.Count - 1].Visible = true;
            }
            else
            {
                trSorEdit.Visible = false;
                gvSORItems.Columns[gvSORItems.Columns.Count - 1].Visible = false;
            }

        }
    }

    protected void bindSORRebate(string refernceID)
    {
        StringBuilder sbQuery = new StringBuilder();
        sbQuery.Append(@"SELECT PERCENTAGE_REBATE
                        FROM RAB_TENDER_MASTER 
                        where REF_ID=:REF_ID 
                         ");
      Dictionary<string, string> paramList = new Dictionary<string, string>();
      paramList.Add("REF_ID", refernceID);      
      lblCurrentRebate.Text=  objDB.executeScalar(sbQuery.ToString(), paramList);
    }

    protected void btnSubmitRebate_Click(object sender, EventArgs e)
    {
        string error = "";
        float sorRebateValue=0;

        if (txtEditSORRate.Text.Length == 0)
        {
            error = "Error: Kindly enter valid value like -1.25, 0.2893.";
        }
        
        if (txtEditSORRate.Text.Length > 0)
        {
            try
            {
                sorRebateValue=float.Parse(txtEditSORRate.Text.Trim());
            }
            catch (Exception err)
            {
                error = "Error: Kindly enter valid value like -1.25, 0.2893.";
            }
        }

        if (error.Length > 0)
        {
            Common.Show(error);
        }
        else
        {
            string[] strArray = ddSORNo.SelectedValue.Split('~');
            Dictionary<string, string> paramList = new Dictionary<string, string>();
            paramList.Add("v_PERCENTAGE_REBATE", sorRebateValue.ToString());
            paramList.Add("v_REF_ID", strArray[0]);
            if (objDB.executeNonQuery("UPDATE RAB_TENDER_MASTER SET PERCENTAGE_REBATE=:v_PERCENTAGE_REBATE WHERE REF_ID=:v_REF_ID",paramList) > 0)
            {
                // calling procedure to update the new value in RAB_ITEM_BREAKUP table
                objDB.executeProcedure("WEBCONS.rab_upd_sor_rebate", paramList);                
                bindSORItems(strArray[0], ddJobNumber.SelectedValue);
                Common.Show("Value updated");
            }
            else
            {
                Common.Show("Error:Value not updated");
            }
        }
    }      

    //protected void bindSor(string jobNumber, string tenderNo)
    //{
    //    StringBuilder sbQuery = new StringBuilder();
    //    sbQuery.Append("SELECT distinct REF_ID, JOB_NO, SUB_JOB, TENDER_NO, PART_NO, SOR_NO, C_CODE, LOI_NO, to_char(LOI_DATE,'dd-Mon-yyyy') LOI_DATE, UNIT_NO,TEND_SOR_ID ")
    //        .Append(" FROM RAB_TENDER_MASTER ")
    //        .Append(" where upper(JOB_NO)=:JOB_NO ")
    //        .Append(" AND upper(TENDER_NO)=:TENDER_NO ")
    //         .Append(" AND C_CODE=:C_CODE ")
    //        .Append(" order by SUB_JOB, TENDER_NO, PART_NO, SOR_NO ");
    //    Dictionary<string, string> paramList = new Dictionary<string, string>();
    //    paramList.Add("JOB_NO", jobNumber.ToUpper());
    //    paramList.Add("TENDER_NO", tenderNo.ToUpper());
    //    paramList.Add("C_CODE", Session["USERID"].ToString());
    //    objDB.bindGridView(gvSOR, sbQuery.ToString(), paramList);
    //}
    protected void gvSOR_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        //try
        //{
        //    if (e.CommandName.Equals("Select"))
        //    {
        //        int RowIndex = Convert.ToInt16(e.CommandArgument.ToString());
        //      //  bindSORDetails();
        //        gvSOR.SelectedIndex = RowIndex;
        //        gvSOR.SelectedRow.BackColor = System.Drawing.Color.LightYellow;
        //    }
        //}
        //catch (Exception ex)
        //{

        //}
    }
    protected void gvSOR_SelectedIndexChanged(object sender, EventArgs e)
    {
        GridViewRow row = gvSOR.SelectedRow;
        HiddenField hdReferenceID = new HiddenField();
        hdReferenceID = (HiddenField)row.FindControl("hdReferenceID");
        string referenceId = hdReferenceID.Value;
        bindSORItems(referenceId,ddJobNumber.SelectedValue);
        pnlSORItems.Visible = true;
    }

    protected void gvSOR_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            //// loop all data rows
            //foreach (DataControlFieldCell cell in e.Row.Cells)
            //{
            //    // check all cells in one row
            //    foreach (Control control in cell.Controls)
            //    {
            //        // Must use LinkButton here instead of ImageButton
            //        // if you are having Links (not images) as the command button.
            //        //ImageButton button = control as ImageButton;
            //        LinkButton button = control as LinkButton;
            //        if (button != null && button.CommandName == "Delete")
            //            // Add delete confirmation
            //            button.OnClientClick = "if (!confirm('Are you sure " +
            //                   "you want to delete this category?')) return;";
            //    }
            //}
        }
    }

    protected void bindSORItems(string referenceId,string jobNumber)
    {    
    StringBuilder sbQuery = new StringBuilder();  

    sbQuery.Append(@"SELECT distinct REF_ID,
       SEQ_NO,
       ITEM_RATE,
       UOM,
       SORT_NO,
       ACT_DESC,
       ACT_PERCENT,
       ACT_SEQ,
       ADDED_ON,
       HO_QTY,
       SITE_QTY,
       ACT_PROG,
       FLAG_HO,
       sdesc,
       CASE
          WHEN ldesc IS NULL THEN ra_get_seq_desc (SEQ_NO, sdesc)
          ELSE ldesc
       END
          ldesc,ITEM_RATE_EDITED
  FROM ( (SELECT DISTINCT REF_ID,
                          SEQ_NO,
                          a.ITEM_RATE,
                          a.UOM,
                          a.SORT_NO,
                          ACT_DESC,
                          ACT_PERCENT,
                          ACT_SEQ,
                          ADDED_ON,
                          HO_QTY,
                          SITE_QTY,
                          ACT_PROG,
                          FLAG_HO,
                          a.sorno sdesc,
                          (TO_CHAR (SUBSTR (a.ldesc, 0, 4000))) ldesc,ITEM_RATE_EDITED
            FROM RAB_ITEM_BREAKUP a, icms_cba.cba_tender b
           WHERE     UPPER (REF_ID) =:REF_ID
                 AND b.JOB =:JOBNO
                 AND b.jtn =:TENDER_NO
                 AND A.SEQ_NO = B.SEQNO
                 AND FLAG_HO = 'N')
        UNION
        (SELECT DISTINCT REF_ID,
                          SEQ_NO,
                          a.ITEM_RATE,
                          a.UOM,
                          a.SORT_NO,
                          ACT_DESC,
                          ACT_PERCENT,
                          ACT_SEQ,
                          ADDED_ON,
                          HO_QTY,
                          SITE_QTY,
                          ACT_PROG,
                          FLAG_HO,
                          a.sorno sdesc,
                          (TO_CHAR (SUBSTR (a.ldesc, 0, 4000))) ldesc,ITEM_RATE_EDITED
            FROM RAB_ITEM_BREAKUP a,CPMSTENDERS.VW_C_FOA_ITEMS_SITEMS b
           WHERE      UPPER (REF_ID) =:REF_ID
                 AND b.JOB_code =:JOBNO
                 AND b.SOR_NO = A.SORNO
                 AND A.SEQ_NO = B.item_sl_no
                 AND FLAG_HO = 'N')
                 union
        (SELECT REF_ID,
                SEQ_NO,
                ITEM_RATE,
                UOM,
                SORT_NO,
                ACT_DESC,
                ACT_PERCENT,
                ACT_SEQ,
                ADDED_ON,
                HO_QTY,
                SITE_QTY,
                ACT_PROG,
                FLAG_HO,
                sorno sdesc,
                ACT_DESC ldesc,ITEM_RATE_EDITED
           FROM RAB_ITEM_BREAKUP
          WHERE UPPER (REF_ID) =:REF_ID AND FLAG_HO = 'Y')
        ORDER BY SORT_NO)  order by SORT_NO");

        Dictionary<string, string> paramList = new Dictionary<string, string>();      

        paramList.Add("REF_ID", referenceId.ToUpper());
        paramList.Add("JOBNO", jobNumber);
        string[] strArray = ddTenderNo.SelectedValue.Split('~');
        paramList.Add("TENDER_NO", strArray[0]);   
        objDB.bindGridView(gvSORItems, sbQuery.ToString(), paramList);
    }


    protected void gvSORItems_RowEditing(object sender, GridViewEditEventArgs e)
    {
        gvSORItems.EditIndex = e.NewEditIndex;
        string[] strArray = ddSORNo.SelectedValue.Split('~');
        bindSORItems(strArray[0], ddJobNumber.SelectedValue);
    }

    protected void gvSORItems_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        gvSORItems.EditIndex = -1;
        string[] strArray = ddSORNo.SelectedValue.Split('~');
        bindSORItems(strArray[0], ddJobNumber.SelectedValue);
    }

    protected void gvSORItems_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {
        int index = gvSORItems.EditIndex;
        GridViewRow row = gvSORItems.Rows[index];
        TextBox txtPercentage = (TextBox)row.FindControl("txtPercentage");
        HiddenField hdReferenceID = (HiddenField)row.FindControl("hdReferenceID");
        HiddenField hdSequenceNo = (HiddenField)row.FindControl("hdSequenceNo");      

        string error = "";
        float pvalue = 0;
        float.TryParse(txtPercentage.Text.ToString(), out pvalue);
        {
            if (pvalue == 0)
            {
                error += "Value is not correct.\\n";
                Common.Show(error);
                return;
            }
        }

        if (txtPercentage.Text.Equals(string.Empty))
        {
            error += "Percentage Value cannot be blank.\\n";
        }
      
        if (error.Equals(string.Empty))
        {
            StringBuilder sbQuery = new StringBuilder();
            Dictionary<string, string> paramList = new Dictionary<string, string>();

            sbQuery.Append("UPDATE RAB_ITEM_BREAKUP SET ITEM_RATE_EDITED=:ITEM_RATE_EDITED WHERE ref_id=:ref_id and seq_no=:seq_no and item_rate is not null and uom is not null");

            paramList.Add("ITEM_RATE_EDITED", pvalue.ToString());   
            paramList.Add("ref_id", hdReferenceID.Value);
            paramList.Add("seq_no", hdSequenceNo.Value);             
            
            int update = objDB.executeNonQuery(sbQuery.ToString(), paramList);
            if (update != 0)
            {
                gvSORItems.EditIndex = -1;
                bindSORItems(hdReferenceID.Value, ddJobNumber.SelectedValue);
                Common.Show("Value updated successfully.");
            }
            else
            {
                Common.Show("Error while updating the value.");
            }
        }
        else
        {
            Common.Show(error);
        }
    }


    protected void gvSORItems_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            HiddenField hdReferenceID = new HiddenField();
            hdReferenceID = (HiddenField)e.Row.FindControl("hdReferenceID");
            string referenceId = hdReferenceID.Value;
            HiddenField hdSequenceNo = new HiddenField();
            hdSequenceNo = (HiddenField)e.Row.FindControl("hdSequenceNo");
            string sequenceNo = hdSequenceNo.Value;

            HiddenField hdItemRate = new HiddenField();
            hdItemRate = (HiddenField)e.Row.FindControl("hdItemRate");
            string itemRate = hdItemRate.Value;
            
            Button btnSplitActivity = new Button();
            btnSplitActivity = (Button)e.Row.FindControl("btnSplitActivity");
           
            // check if item rate available than allow edit value          

            LinkButton bt = (LinkButton)e.Row.Cells[8].Controls[0];           

            if (hdItemRate.Value.Length > 0)
            {               
            
                bt.Visible = true;
                GridView gvChildReport = e.Row.FindControl("gvSORSplits") as GridView;
                StringBuilder query = new StringBuilder();
                query.Append(" select distinct REF_ID,SEQ_NO,ACTIVITY_DESC , ")
                    .Append(" ACTIVITY_PERCENT,IS_BREAKABLE,ACTIVITY_ID,BE_FROZEN,AC_FROZEN,RCM_FROZEN,activity_seq   ")
                    .Append("    from RAB_TENDER_DETAILS ")
                    .Append(" where REF_ID=:REF_ID ")
                    .Append(" and SEQ_NO =:SEQ_NO ")
                    .Append(" order by activity_seq asc,IS_BREAKABLE desc ");
                Dictionary<string, string> paramList = new Dictionary<string, string>();
                paramList.Add("REF_ID", referenceId);
                paramList.Add("SEQ_NO", sequenceNo);

                objDB.bindGridView(gvChildReport, query.ToString(), paramList);
            }
            else
            {
                bt.Visible = false;              
            }
        }
    }

    protected void gvSORSplits_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            HiddenField hdChildReferenceID = new HiddenField();
            hdChildReferenceID = (HiddenField)e.Row.FindControl("hdChildReferenceID");
            string referenceId = hdChildReferenceID.Value;
            HiddenField hdChildSequenceNo = new HiddenField();
            hdChildSequenceNo = (HiddenField)e.Row.FindControl("hdChildSequenceNo");
            string sequenceNo = hdChildSequenceNo.Value;

            HiddenField hdActivityPercent = new HiddenField();
            hdActivityPercent = (HiddenField)e.Row.FindControl("hdActivityPercent");
            string activityPercent = hdActivityPercent.Value;

            HiddenField hdActivityId = new HiddenField();
            hdActivityId = (HiddenField)e.Row.FindControl("hdActivityId");
            string activityId = hdActivityId.Value;
            

            HiddenField hdIsBreakable = new HiddenField();
            hdIsBreakable = (HiddenField)e.Row.FindControl("hdIsBreakable");
            string isBreakable = hdIsBreakable.Value;

            HiddenField hdBEFrozen = new HiddenField();
            hdBEFrozen = (HiddenField)e.Row.FindControl("hdBEFrozen");

            HiddenField hdACFrozen = new HiddenField();
            hdACFrozen = (HiddenField)e.Row.FindControl("hdACFrozen");

            HiddenField hdRCMFrozen = new HiddenField();
            hdRCMFrozen = (HiddenField)e.Row.FindControl("hdRCMFrozen");

            Button btnChildSplitActivity = new Button();
            btnChildSplitActivity = (Button)e.Row.FindControl("btnChildSplitActivity");

            Label lblStatus=new Label();
            lblStatus = (Label)e.Row.FindControl("lblStatus");

           //check if Bill has been raised for the activity, don't allow to split the activity and disable Split button
            StringBuilder sbQuery=new StringBuilder();
            sbQuery.Append(@"select count(*) 
                               from rab_tender_bill  
                               where trim(SEQ_NO) =trim(:SEQ_NO) 
                              AND trim(REF_ID) =trim(:REF_ID)
                              and trim(ACT_SEQ)=trim(:ACT_SEQ) ");
            Dictionary<string, string> paramList = new Dictionary<string, string>();
            paramList.Add("REF_ID", referenceId);
            paramList.Add("SEQ_NO", sequenceNo);
            paramList.Add("ACT_SEQ", activityId);

            string activityCount = objDB.executeScalar(sbQuery.ToString(),paramList);            

            if ("Y".Equals(isBreakable) && ("Y".Equals(hdBEFrozen.Value) || "Y".Equals(hdACFrozen.Value) || "Y".Equals(hdRCMFrozen.Value)))
            {
                btnChildSplitActivity.Visible = true;
                lblStatus.Text = "";
            }
            else if ("Y".Equals(isBreakable) && ("R".Equals(hdBEFrozen.Value) && "N".Equals(hdACFrozen.Value) && "N".Equals(hdRCMFrozen.Value)))
            {
                btnChildSplitActivity.Text = "View";
                btnChildSplitActivity.Visible = true;
                lblStatus.Text = "Rejected by Billing Engineer";
            }
            else if ("N".Equals(isBreakable))
            {
                btnChildSplitActivity.Visible = false;
                lblStatus.Text = "";
            }
            else
            {
                btnChildSplitActivity.Visible = false;
                lblStatus.Text = "Approval Pending";
            }

            if (activityCount.Length > 0 && !"0".Equals(activityCount))
            {
                btnChildSplitActivity.Visible = false;
            }
        }
    }

    protected void btnChildSplitActivity_Click(object sender, EventArgs e)
    {
        String key = (sender as Button).Attributes["key"];
        String[] keys = key.Split('$');
        lblActivityDesc.Text = keys[3].ToString();
        hdReferenceId.Value = keys[0].ToString();
        hdSequenceNumber.Value = keys[1].ToString();
        hdActivityPercentage.Value = keys[2].ToString();
        hdActivityId.Value = keys[4].ToString();
        hdBE_Frozen.Value = keys[5].ToString();

        if ("R".Equals(hdBE_Frozen.Value))
        {
            lblNote.Text = "Note: Kindly delete all the activities by clicking on delete all button <br/>and Add new activities as desired";
            btnDeleteAll.Visible = true;
            PnlInvoice.Visible = false;
        }
        else
        {
            btnDeleteAll.Visible = false;
            PnlInvoice.Visible = true;
            lblNote.Text = "";
        }
         StringBuilder sbQuery = new StringBuilder();
        sbQuery.Append(@"select substr(ldesc,0,4000) ldesc
                        from
                        (
                        SELECT DISTINCT TO_CHAR (a.ldesc) ldesc
                          FROM RAB_ITEM_BREAKUP a, icms_cba.cba_tender b
                         WHERE     UPPER (REF_ID) =:REF_ID
                               AND UPPER (B.SEQNO) =:SEQ_NO
                               AND A.SEQ_NO = B.SEQNO
                               AND b.JOB =:JOBNO
                               AND b.jtn =:TENDER_NO
                          union
                          SELECT DISTINCT TO_CHAR (a.ldesc) ldesc
                          FROM RAB_ITEM_BREAKUP a, CPMSTENDERS.VW_C_FOA_ITEMS_SITEMS b
                         WHERE     UPPER (REF_ID) =:REF_ID
                               AND UPPER (B.item_sl_no) =:SEQ_NO
                               AND A.SEQ_NO = B.item_sl_no
                               AND b.JOB_code =:JOBNO
                               )");

            Dictionary<string, string> paramList = new Dictionary<string, string>();
            paramList.Add("REF_ID", keys[0].ToString());
            paramList.Add("SEQ_NO", keys[1].ToString());
            paramList.Add("JOBNO", ddJobNumber.SelectedValue);
            string[] strArray = ddTenderNo.SelectedValue.Split('~');
            paramList.Add("TENDER_NO", strArray[0]);            
            lblActivityDesc.Text = objDB.executeScalar(sbQuery.ToString(), paramList);
        lblActivityPercent.Text = keys[2].ToString();
        bindSplittedGrid(keys[0].ToString(), keys[1].ToString());
        ViewState["fileID"] = keys[0].ToString();
        ModalPopupExtenderForAssignRack.Show();
    }

    protected void bindSplittedGrid(string referenceId, string sequenceNo)
    {
        StringBuilder query = new StringBuilder();
        query.Append(" select ACTIVITY_DESC , ")
            .Append(" ACTIVITY_PERCENT   ")
            .Append("    from RAB_TENDER_DETAILS ")
            .Append(" where REF_ID=:REF_ID ")
            .Append(" and SEQ_NO =:SEQ_NO ")

             //Adding because duplicate data has been inserted
            //Commented below line on 06-07-2017 as it was giving problem when two activities were splitted by same no for e.g. 5% each (It was missing one 5% from the list)
           //     .Append(" and ACTIVITY_ID in (select min(ACTIVITY_ID) from RAB_TENDER_DETAILS WHERE REF_ID =:REF_ID1 AND SEQ_NO =:SEQ_NO1 group by activity_percent)")
          .Append(" order by ACTIVITY_SEQ ");
        Dictionary<string, string> paramList = new Dictionary<string, string>();
        paramList.Add("REF_ID", referenceId);
        paramList.Add("SEQ_NO", sequenceNo);
        //Adding because duplicate data has been inserted
       // paramList.Add("REF_ID1", referenceId);
      //  paramList.Add("SEQ_NO1", sequenceNo);
        objDB.bindGridView(gvSORSplitted, query.ToString(), paramList);
    }

    protected void btnDeleteAll_Click(object sender, EventArgs e)
    {
        lblActivityPercent.Text = "95";
        hdActivityPercentage.Value = "95";
        int recordsAffected = 0;        
        ArrayList queryList = new ArrayList();
        ArrayList paramList = new ArrayList();  
        StringBuilder sbDeleteAllQry = new StringBuilder();
        sbDeleteAllQry.Append("DELETE FROM RAB_TENDER_DETAILS WHERE REF_ID=:REF_ID AND SEQ_NO=:SEQ_NO AND IS_BREAKABLE='Y'");
        Dictionary<string, string> deleteParam = new Dictionary<string, string>();
        deleteParam.Add("REF_ID", hdReferenceId.Value);
        deleteParam.Add("SEQ_NO", hdSequenceNumber.Value);
        queryList.Add(sbDeleteAllQry.ToString());
        paramList.Add(deleteParam);    
        StringBuilder sbQuery = new StringBuilder();
            sbQuery.Append(" insert into RAB_TENDER_DETAILS ")
                    .Append(" ( ")
                    .Append("   REF_ID       , ")
                    .Append("  SEQ_NO       ,  ")
                    .Append("   ACTivity_PERCENT, ")
                    .Append("  ACTivity_SEQ ,  ")
                    .Append("  added_by , ")
                    .Append("  ACTIVITY_DESC,BE_FROZEN,AC_FROZEN, RCM_FROZEN ")
                    .Append("  ) values (")
                    .Append("   :REF_ID       , ")
                    .Append("  :SEQ_NO       ,  ")
                    .Append("   :ACTivity_PERCENT, ")
                    .Append("  :ACTivity_SEQ ,  ")
                    .Append("  :added_by , ")
                    .Append("  :ACTIVITY_DESC,:BE_FROZEN,:AC_FROZEN, :RCM_FROZEN )");
            Dictionary<string, string> param = new Dictionary<string, string>();
            
            param.Add("REF_ID", hdReferenceId.Value);
            param.Add("SEQ_NO", hdSequenceNumber.Value);
            param.Add("ACTivity_PERCENT", "95");
            param.Add("ACTivity_SEQ", "2");
            param.Add("added_by", Session["USERID"].ToString());
            param.Add("ACTIVITY_DESC", "Split Activities as desired");
            param.Add("BE_FROZEN", "N");
            param.Add("AC_FROZEN", "N");
            param.Add("RCM_FROZEN", "N");
            queryList.Add(sbQuery.ToString());
            paramList.Add(param);           
        
            if (queryList.Count > 1)
            {
                string[] queryArray = new String[queryList.Count];
                Dictionary<string, string>[] paramListArray = new Dictionary<string, string>[paramList.Count];
                for(int ii=0;ii<queryList.Count;ii++)
                {
                    queryArray[ii]=queryList[ii].ToString();
                    paramListArray[ii]= (Dictionary<string, string>)paramList[ii];
                }
                if (queryArray.Length > 0)
                 recordsAffected =   objDB.executeTransaction(queryArray, paramListArray);
            }
            bindSplittedGrid(hdReferenceId.Value, hdSequenceNumber.Value);
            ViewState["fileID"] = hdReferenceId.Value;
            ModalPopupExtenderForAssignRack.Show();
    }
    
    protected void btnSubmit_Click(object sender, EventArgs e)
    {
        if (Page.IsValid && CheckMandatoryInput())
        {
            Dictionary<int, string[]> activities = new Dictionary<int, string[]>();
            double percentageBreakup = 0;
            for (int i = 1; i <= int.Parse(Request["inpTot"]); i++)
            {
                string[] values = GetValues(i);
                if (values != null)
                {
                    activities.Add(i, values);
                    percentageBreakup = percentageBreakup + double.Parse(values[1].ToString());
                }
            }

            if (percentageBreakup == double.Parse(hdActivityPercentage.Value.ToString()))
            {
                if (activities.Keys.Count > 0)
                {
                    if (InsertActivities(activities))
                    {
                        ShowMessage("Activity Added", false, String.Empty);
                        gvSOR_SelectedIndexChanged(sender, e);
                    }
                    else
                    {
                        ShowMessage("Activity Addition Failed, Try Again", true, String.Empty);
                    }
                }
            }
            else
            {
                lblActivityError.Text = "Error: Percentage breakup does not match actual value.Kindly correct";
                ModalPopupExtenderForAssignRack.Show();
            }                
        }
        else 
        {
            lblActivityError.Text= "Error: Kindly fill the Activity description and Percentage.";
            ModalPopupExtenderForAssignRack.Show();
        }
    }

    private void ShowMessage(string Msg, bool IsError, string RedirectURL)
    {
        Common.Show(Msg);
        
    }

    private bool InsertActivities(Dictionary<int, string[]> activity)
    {
        int recordsAffected = 0;
        int i = 0;
        ArrayList queryList = new ArrayList();
        ArrayList paramList = new ArrayList();       
        
        //Delete the existing record and insert other activities for the deleted activity
        StringBuilder sbDeleteQuery = new StringBuilder();
        Dictionary<string, string> deleteParam = new Dictionary<string, string>();
        sbDeleteQuery.Append("DELETE FROM RAB_TENDER_DETAILS WHERE REF_ID=:REF_ID and SEQ_NO=:SEQ_NO and ACTivity_PERCENT=:ACTivity_PERCENT and ACTIVITY_ID=:ACTIVITY_ID and IS_BREAKABLE='Y'");
        deleteParam.Add("REF_ID", hdReferenceId.Value);
        deleteParam.Add("SEQ_NO", hdSequenceNumber.Value);
        deleteParam.Add("ACTivity_PERCENT", hdActivityPercentage.Value);
        deleteParam.Add("ACTIVITY_ID", hdActivityId.Value);
        queryList.Add(sbDeleteQuery.ToString());
        paramList.Add(deleteParam); 
        foreach (KeyValuePair<int, string[]> item in activity)
        {
            StringBuilder sbQuery = new StringBuilder();
            sbQuery.Append(" insert into RAB_TENDER_DETAILS ")
                    .Append(" ( ")
                    .Append("   REF_ID       , ")
                    .Append("  SEQ_NO       ,  ")
                    .Append("   ACTivity_PERCENT, ")
                    .Append("  ACTivity_SEQ ,  ")
                    .Append("  added_by , ")
                    .Append("  ACTIVITY_DESC,BE_FROZEN,AC_FROZEN, RCM_FROZEN ")
                    .Append("  ) values (")
                    .Append("  :REF_ID       , ")
                    .Append("  :SEQ_NO       ,  ")
                    .Append("  :ACTivity_PERCENT, ")
                    .Append("  :ACTivity_SEQ ,  ")
                    .Append("  :added_by , ")
                    .Append("  :ACTIVITY_DESC,:BE_FROZEN,:AC_FROZEN, :RCM_FROZEN )");
            Dictionary<string, string> param = new Dictionary<string, string>();
            i++;
            param.Add("REF_ID", hdReferenceId.Value);
            param.Add("SEQ_NO", hdSequenceNumber.Value);
            param.Add("ACTivity_PERCENT", item.Value[1]);
            param.Add("ACTivity_SEQ", i.ToString());
            param.Add("added_by", Session["USERID"].ToString());
            param.Add("ACTIVITY_DESC", item.Value[0]);
            param.Add("BE_FROZEN", "N");
            param.Add("AC_FROZEN", "N");
            param.Add("RCM_FROZEN", "N");
            queryList.Add(sbQuery.ToString());
            paramList.Add(param);            
        }
        if (queryList.Count > 1)
            {
                string[] queryArray = new String[queryList.Count];
                Dictionary<string, string>[] paramListArray = new Dictionary<string, string>[paramList.Count];
                for(int ii=0;ii<queryList.Count;ii++)
                {
                    queryArray[ii]=queryList[ii].ToString();
                    paramListArray[ii]= (Dictionary<string, string>)paramList[ii];
                }
                if (queryArray.Length > 0)
                 recordsAffected =   objDB.executeTransaction(queryArray, paramListArray);
            }
        if (recordsAffected > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    private bool InvoiceNotExist(string[] p)
    {
        throw new NotImplementedException();
    }

    private string[] GetValues(int i)
    {
        if (Validate(Request["txtActDesc" + i], "ACTDESC") == null ||
                    Validate(Request["txtActPercent" + i], "ACTPERCENT") == null 
                )
        {
            return null;
        }
        else
        {
            return new string[] { 
                    Validate(Request["txtActDesc" + i], "ACTDESC"),
                    Validate(Request["txtActPercent" + i], "ACTPERCENT")
                };
        }
    }

    private string Validate(string Value, string Type)
    {
        string ReturnVal = String.Empty;

        switch (Type)
        {
            case "ACTDESC":


                if (Value.Length > 500)
                {
                    Value = Value.Substring(0, 499);
                }

               // if (!String.IsNullOrEmpty(Value) && Value.Length < 500 && Value.IndexOf(",") <= 0)
                if (!String.IsNullOrEmpty(Value) && Value.Length < 500 )
                {
                    ReturnVal = Value;
                }
                else
                {
                    ReturnVal = null;
                }


                break;
            case "ACTPERCENT":

                double invamt = 0;

                double.TryParse(Value, out invamt);

                if (!String.IsNullOrEmpty(Value) && Value.Length < 12 && invamt != 0)
                {
                    ReturnVal = Value;
                }
                else
                {
                    ReturnVal = null;
                }
                break;           
            default:
                ReturnVal = null;
                break;
        }
        return ReturnVal.ParseSQL();
    }

    private bool CheckMandatoryInput()
    {
        int totInput = 0;
        int.TryParse(Request["inpTot"], out totInput);
        if (Request["inpTot"] == null || totInput == 0)
        {
            return false;          
        }
        return true;
    }
}